<?php
// $Id$

/**
 * @file
 *
 * Flag note module uses a new flag_link_type 'Flag note form' to allow users to attached a note to flags
 *  defined to use this link_type.
 */

/**
 * Implementation of hook_preprocess_flag().
 */
function flag_note_preprocess_flag(&$vars) {
  if ($vars['flag']->link_type == 'flag_note_form') {
    $vars['flag_classes'] .= ' flag-note';
    if ($vars['action'] == 'flag' and module_exists('popups')) {
      popups_add_popups();
      $vars['flag_classes'] .= ' popups-form';
    }
  }
}

/**
 * Implementation of hook_views_api().
 */
function flag_note_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'flag_note') .'/includes',
  );
}

/**
 * Implementation of hook_menu().
 */
function flag_note_menu() {
  $items = array();
  $items['flag/note'] = array(
    'title' => 'Flag',
    'page callback' => 'flag_note_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 *  Deletes notes once a node is deleted.
 */
function flag_note_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'delete':
      flag_note_remove_notes(array('content_type' => 'node', 'content_id' => $node->nid));
    break;
  }
}

/**
 * Implementation of hook_user().
 *  Deletes notes once an user is deleted.
 */
function flag_note_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete':
      flag_note_remove_notes(array('content_type' => 'user', 'content_id' => $user->uid));
    break;
  }
}

/**
 * Implementation of hook_comment().
 *  Deletes notes once a comment is deleted.
 */
function flag_note_comment(&$a1, $op) {
  switch ($op) {
    case 'delete':
      flag_note_remove_notes(array('content_type' => 'comment', 'content_id' => $a1->cid));
    break;
  }
}

/**
 * Implementation of hook_form_alter().
 *  Deletes notes once a flag is deleted.
 */
function flag_note_form_flag_delete_confirm_alter(&$form, $form_state) {
  $form['#submit'][] = 'flag_note_flag_delete_confirm_submit';
}

function flag_note_flag_delete_confirm_submit(&$form, $form_state) {
  flag_note_remove_notes(array('fid' => $form_state['values']['fid']));
}

/**
 * Called from the flag's link which is set up in hook_flag_link.
 */
function flag_note_page($action, $flag_name, $content_id) {
  switch ($action) {
    case 'flag';
      return drupal_get_form('flag_note_form', $action, $flag_name, $content_id);
      break;
    case 'unflag':
      // TODO add admin option to delete old notes
      // by now, do nothing as we keep the old notes
      flag_page($action, $flag_name, $content_id);
      break;
  }
}

function flag_note_form(&$form_state, $action, $flag_name, $content_id) {
  $form = array();
  $form['action'] = array(
    '#type' => 'value',
    '#value' => 'flag',
  );
  $form['flag_name'] = array(
    '#type' => 'value',
    '#value' => $flag_name,
  );
  $form['content_id'] = array(
    '#type' => 'value',
    '#value' => $content_id,
  );
  $form['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Flag note'),
    '#cols' => 60,
    '#rows' => 5,
    '#description' => t('A descriptive reason.'),
    '#weight' => -1,
    '#required' => TRUE,
  );
  $flag = flag_get_flag($flag_name);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $flag->get_label('flag_short'),
  );
  return $form;
}

function flag_note_form_submit(&$form, &$form_state) {
  global $user;
  $flag = flag_get_flag($form_state['values']['flag_name']);
  $result = $flag->flag($form_state['values']['action'], $form_state['values']['content_id']);
  if (empty($result)) {
    drupal_set_message(t('You are not allowed to flag, or unflag, this content.'));
  }
  else {
    $userflag = flag_get_user_flags($flag->content_type, $form_state['values']['content_id'], $user->uid);
    $record = $userflag[$flag->name];
    $record->note = $form_state['values']['note'];
    flag_note_insert_note($record);
    drupal_set_message($flag->get_label($action .'_message', $content_id));
  }
}

/**
 * Implementation of hook_flag_link_types().
 *  Defines a link type that the admin can select when editting a flag
 */
function flag_note_flag_link_types() {
  return array('flag_note_form' => t('Flag note form'));
}

/**
 * Implementation of hook_flag_link().
 *  Build the callback link for flags
 */
function flag_note_flag_link(&$flag, $action, $content_id) {
  $token = flag_get_token($content_id);
  return array(
    'href' => "flag/note/$action/$flag->name/$content_id",
    'query' => drupal_get_destination() .'&token='. $token,
  );
}

/*
 * Database interaction
 */

function flag_note_get_schema() {
  static $schema = NULL;
  if (empty($schema)) {
    $schema = drupal_get_schema('flag_note');
  }
  return $schema;
}

function flag_note_insert_note($record) {
  $record = (array) $record;
  $record['note'] = filter_xss($record['note']);
  drupal_write_record('flag_note', $record);
}

function flag_note_remove_notes($options) {
  $schema = flag_note_get_schema();
  foreach ($options as $field => $value) {
    $where[] = $field .' = '. db_type_placeholder($schema['fields'][$field]['type']);
  }
  db_query('DELETE FROM {flag_note} WHERE '. implode(' AND ', $where), $options);
}

function flag_note_get_notes($options) {
  $notes = array();
  $schema = flag_note_get_schema();
  foreach ($options as $field => $value) {
    $where[] = $field .' = '. db_type_placeholder($schema['fields'][$field]['type']);
  }
  $result = db_query('SELECT * FROM {flag_note} WHERE '. implode(' AND ', $where), $options);
  while ($note = db_fetch_array($result)) {
    $notes[] = $note;
  }
  return $notes;
}
